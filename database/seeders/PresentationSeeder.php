<?php

namespace Database\Seeders;

use App\Models\Participant;
use App\Models\Presentation;
use App\Models\ProgramSession;
use App\Models\Sponsor;
use Illuminate\Database\Seeder;
use Carbon\Carbon;

class PresentationSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('ðŸ“„ Creating presentations...');

        $presentationTitles = [
            // Neonatoloji
            'PrematÃ¼re Bebeklerde NÃ¶rogeliÅŸimsel Takip',
            'Neonatal Sepsis TanÄ± ve Tedavi YaklaÅŸÄ±mlarÄ±',
            'ECMO ile Tedavi Edilen YenidoÄŸanlarÄ±n Uzun DÃ¶nem SonuÃ§larÄ±',
            'Konjenital Kalp HastalÄ±ÄŸÄ± Olan YenidoÄŸanlarda Cerrahi Ã–ncesi YÃ¶netim',
            'Bronkopulmoner Displazi Ã–nleme Stratejileri',
            
            // Endokrinoloji
            'Ã‡ocukluk Ã‡aÄŸÄ± Tip 1 Diyabetinde Teknolojik GeliÅŸmeler',
            'AdÃ¶lesan DÃ¶nemde Tiroid HastalÄ±klarÄ±',
            'BÃ¼yÃ¼me Hormonu EksikliÄŸi TanÄ± Kriterleri',
            'Puberte Prekoks: GÃ¼ncel Tedavi YaklaÅŸÄ±mlarÄ±',
            'Ã‡ocukluk Ã‡aÄŸÄ± Obesitesi ve Metabolik Sendrom',
            
            // Enfeksiyon
            'COVID-19\'un Ã‡ocuklar Ãœzerindeki Etkileri',
            'Antibiyotik Direnci ile MÃ¼cadele Stratejileri',
            'Ã‡ocukluk Ã‡aÄŸÄ± TÃ¼berkÃ¼loz TanÄ± ve Tedavisi',
            'Ä°nvaziv Fungal Enfeksiyonlar',
            'AÅŸÄ± KararsÄ±zlÄ±ÄŸÄ± ile BaÅŸa Ã‡Ä±kma YÃ¶ntemleri',
            
            // Kardiyoloji
            'Konjenital Kalp HastalÄ±klarÄ±nda Erken TanÄ±',
            'Ã‡ocuklarda Hipertansiyon YÃ¶netimi',
            'Kawasaki HastalÄ±ÄŸÄ±: TanÄ± ve Tedavi GÃ¼ncellemeleri',
            'Pediatrik Kalp Nakli SonuÃ§larÄ±',
            'Spor Kardiyolojisi: Ã‡ocuk ve AdÃ¶lesanlarda DeÄŸerlendirme',
            
            // Gastroenteroloji
            'Ä°nflamatuar Barsak HastalÄ±klarÄ±nda Biyolojik Tedaviler',
            'Ã‡Ã¶lyak HastalÄ±ÄŸÄ±: GlÃ¼tensiz Diyet Ã–tesi',
            'Pediatrik KaraciÄŸer Nakli Ä°ndikasyonlarÄ±',
            'Fonksiyonel KarÄ±n AÄŸrÄ±sÄ± Tedavi YaklaÅŸÄ±mlarÄ±',
            'Helikobakter Pilori Eradikasyonu',
            
            // NÃ¶roloji
            'Ã‡ocukluk Ã‡aÄŸÄ± Epilepsisinde Ä°laÃ§ DirenÃ§li Vakalar',
            'Otizm Spektrum BozukluÄŸu: Erken MÃ¼dahale',
            'Pediatrik FelÃ§: Rehabilitasyon YaklaÅŸÄ±mlarÄ±',
            'Migren Proflaksisinde Yeni YaklaÅŸÄ±mlar',
            'GeÃ§ GeliÅŸimsel BozukluklarÄ±n DeÄŸerlendirilmesi',
            
            // Hematoloji-Onkoloji
            'Ã‡ocukluk Ã‡aÄŸÄ± LÃ¶semilerinde Ä°mmÃ¼noterapi',
            'Solid TÃ¼mÃ¶rlerde Minimal Ä°nvaziv Cerrahi',
            'Hemofili Tedavisinde Profilaksi YaklaÅŸÄ±mlarÄ±',
            'Talasemi HastalarÄ±nda Demir Åželasyon Tedavisi',
            'Ã‡ocukluk Ã‡aÄŸÄ± Kanserlerinde Palyatif BakÄ±m',
        ];

        $abstracts = [
            'Bu Ã§alÄ±ÅŸmada, hastanemizde son 5 yÄ±lda tedavi gÃ¶rdÃ¼ hastalarÄ±n retrospektif analizi yapÄ±lmÄ±ÅŸtÄ±r. SonuÃ§lar literatÃ¼rle karÅŸÄ±laÅŸtÄ±rÄ±larak deÄŸerlendirilmiÅŸtir.',
            'Prospektif kohort Ã§alÄ±ÅŸmasÄ±nda, 200 hasta 2 yÄ±l boyunca takip edilmiÅŸtir. Tedavi etkinliÄŸi ve yan etkiler detaylÄ± olarak analiz edilmiÅŸtir.',
            'Meta-analiz Ã§alÄ±ÅŸmasÄ±nda, 2010-2023 yÄ±llarÄ± arasÄ±ndaki 50 Ã§alÄ±ÅŸma incelenmiÅŸtir. Tedavi protokollerinin etkinliÄŸi karÅŸÄ±laÅŸtÄ±rmalÄ± olarak deÄŸerlendirilmiÅŸtir.',
            'Randomize kontrollÃ¼ Ã§alÄ±ÅŸmada, yeni tedavi yaklaÅŸÄ±mÄ±nÄ±n etkinliÄŸi standart tedavi ile karÅŸÄ±laÅŸtÄ±rÄ±lmÄ±ÅŸtÄ±r. 12 aylÄ±k takip sonuÃ§larÄ± sunulmuÅŸtur.',
            'Olgu serisi Ã§alÄ±ÅŸmasÄ±nda, nadir gÃ¶rÃ¼len hastalÄ±ÄŸa sahip 15 hastanÄ±n klinik Ã¶zellikleri ve tedavi yanÄ±tlarÄ± analiz edilmiÅŸtir.',
            'Ã‡ok merkezli Ã§alÄ±ÅŸmada, farklÄ± tedavi protokollerinin karÅŸÄ±laÅŸtÄ±rÄ±lmasÄ± yapÄ±lmÄ±ÅŸtÄ±r. 3 yÄ±llÄ±k uzun dÃ¶nem sonuÃ§lar deÄŸerlendirilmiÅŸtir.',
            'Sistematik derleme Ã§alÄ±ÅŸmasÄ±nda, son 10 yÄ±lda yayÄ±nlanan tÃ¼m Ã§alÄ±ÅŸmalar gÃ¶zden geÃ§irilmiÅŸtir. KanÄ±ta dayalÄ± Ã¶neriler geliÅŸtirilmiÅŸtir.',
            'Kesitsel Ã§alÄ±ÅŸmada, hastalÄ±k prevalansÄ± ve risk faktÃ¶rleri araÅŸtÄ±rÄ±lmÄ±ÅŸtÄ±r. Demografik Ã¶zellikler detaylÄ± olarak analiz edilmiÅŸtir.',
        ];

        $totalPresentations = 0;

        foreach (ProgramSession::where('is_break', false)->get() as $session) {
            // Break olmayan oturumlar iÃ§in sunum oluÅŸtur
            $presentationCount = $this->getPresentationCount($session);
            
            if ($presentationCount === 0) continue;
            
            // Oturum sÃ¼resi iÃ§inde zaman dilimlerini oluÅŸtur
            $timeSlots = $this->generatePresentationTimeSlots($session, $presentationCount);
            
            for ($i = 0; $i < $presentationCount; $i++) {
                $title = $presentationTitles[array_rand($presentationTitles)];
                $abstract = $abstracts[array_rand($abstracts)];
                $presentationType = $this->selectPresentationType($session);
                
                $presentation = Presentation::create([
                    'program_session_id' => $session->id,
                    'title' => $title,
                    'abstract' => $abstract,
                    'start_time' => $timeSlots[$i]['start'],
                    'end_time' => $timeSlots[$i]['end'],
                    'presentation_type' => $presentationType,
                    'sponsor_id' => $this->getRandomSponsor($session),
                    'sort_order' => $i + 1,
                ]);
                
                // KonuÅŸmacÄ±larÄ± ata
                $this->attachSpeakers($presentation, $session);
                
                $totalPresentations++;
            }
        }

        $this->command->info("âœ… Created {$totalPresentations} presentations");
        $this->command->info("ðŸ“Š Presentations by type:");
        $types = ['keynote', 'oral', 'case_presentation', 'symposium'];
        foreach ($types as $type) {
            $count = Presentation::where('presentation_type', $type)->count();
            $this->command->info("   - {$type}: {$count}");
        }
    }

    private function getPresentationCount(ProgramSession $session): int
    {
        // Oturum tipine gÃ¶re sunum sayÄ±sÄ±nÄ± belirle
        return match($session->session_type) {
            'main' => rand(1, 3), // Ana oturumlar: 1-3 sunum
            'satellite' => rand(3, 5), // Uydu sempozyumlarÄ±: 3-5 sunum
            'oral_presentation' => rand(4, 6), // SÃ¶zlÃ¼ bildiri: 4-6 sunum
            'special' => rand(2, 4), // Ã–zel oturumlar: 2-4 sunum
            'break' => 0, // Ara oturumlarÄ±nda sunum yok
            default => rand(1, 3),
        };
    }

    private function generatePresentationTimeSlots(ProgramSession $session, int $count): array
    {
        // Daha gÃ¼venli time parsing
        $sessionStartStr = $session->start_time instanceof \Carbon\Carbon 
            ? $session->start_time->format('H:i') 
            : (string) $session->start_time;
        
        $sessionEndStr = $session->end_time instanceof \Carbon\Carbon 
            ? $session->end_time->format('H:i') 
            : (string) $session->end_time;
        
        // H:i:s formatÄ±nda gelebilir, sadece H:i kÄ±smÄ±nÄ± al
        $sessionStartStr = substr($sessionStartStr, 0, 5); // "09:00:00" -> "09:00"
        $sessionEndStr = substr($sessionEndStr, 0, 5);     // "10:30:00" -> "10:30"
        
        try {
            $sessionStart = Carbon::createFromFormat('H:i', $sessionStartStr);
            $sessionEnd = Carbon::createFromFormat('H:i', $sessionEndStr);
        } catch (\Exception $e) {
            // EÄŸer hala hata varsa, farklÄ± format dene
            $sessionStart = Carbon::parse($session->start_time);
            $sessionEnd = Carbon::parse($session->end_time);
        }
        
        $totalMinutes = $sessionStart->diffInMinutes($sessionEnd);
        
        // Her sunum iÃ§in ortalama sÃ¼re (tartÄ±ÅŸma dahil)
        $averageDuration = intval($totalMinutes / $count);
        
        $slots = [];
        $currentTime = $sessionStart->copy();
        
        for ($i = 0; $i < $count; $i++) {
            // Son sunum dÄ±ÅŸÄ±nda belirlenen sÃ¼reyi kullan
            if ($i === $count - 1) {
                $endTime = $sessionEnd->copy();
            } else {
                $duration = rand($averageDuration - 5, $averageDuration + 5);
                $endTime = $currentTime->copy()->addMinutes($duration);
            }
            
            $slots[] = [
                'start' => $currentTime->format('H:i:s'), // Database iÃ§in H:i:s formatÄ±
                'end' => $endTime->format('H:i:s'),       // Database iÃ§in H:i:s formatÄ±
            ];
            
            $currentTime = $endTime->copy();
        }
        
        return $slots;
    }

    private function selectPresentationType(ProgramSession $session): string
    {
        // Oturum tipine gÃ¶re sunum tipini belirle
        return match($session->session_type) {
            'main' => rand(1, 100) <= 60 ? 'keynote' : 'oral',
            'satellite' => rand(1, 100) <= 70 ? 'symposium' : 'oral',
            'oral_presentation' => 'oral',
            'special' => rand(1, 100) <= 40 ? 'case_presentation' : 'oral',
            default => 'oral',
        };
    }

    private function getRandomSponsor(ProgramSession $session): ?int
    {
        // %30 oranÄ±nda sunum sponsoru
        if (rand(1, 100) <= 30) {
            $venue = $session->venue;
            $eventDay = $venue->eventDay;
            $event = $eventDay->event;
            
            $sponsor = Sponsor::where('organization_id', $event->organization_id)
                             ->where('is_active', true)
                             ->inRandomOrder()
                             ->first();
            
            return $sponsor?->id; // Normal ID dÃ¶ndÃ¼r (UUID deÄŸil)
        }
        
        return null;
    }

    private function attachSpeakers(Presentation $presentation, ProgramSession $session): void
    {
        $venue = $session->venue;
        $eventDay = $venue->eventDay;
        $event = $eventDay->event;
        
        // KonuÅŸmacÄ± havuzunu al
        $speakers = Participant::where('organization_id', $event->organization_id)
                              ->where('is_speaker', true)
                              ->inRandomOrder()
                              ->get();
        
        if ($speakers->isEmpty()) return;
        
        // Sunum tipine gÃ¶re konuÅŸmacÄ± sayÄ±sÄ±nÄ± belirle
        $speakerCount = match($presentation->presentation_type) {
            'keynote' => 1,
            'oral' => rand(1, 2),
            'case_presentation' => rand(1, 3),
            'symposium' => rand(2, 4),
            default => rand(1, 2),
        };
        
        $selectedSpeakers = $speakers->take($speakerCount);
        
        $sortOrder = 1;
        foreach ($selectedSpeakers as $index => $speaker) {
            $role = match($index) {
                0 => 'primary',
                default => rand(1, 100) <= 70 ? 'co_speaker' : 'discussant',
            };
            
            $presentation->speakers()->attach($speaker->id, [
                'speaker_role' => $role,
                'sort_order' => $sortOrder++,
            ]);
        }
    }
}